name: Python Tests with UI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

      env:
        SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub

    - name: Set up webdriver-manager
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install selenium webdriver-manager

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install Python dependencies
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Allure
      id: install_allure
      shell: pwsh
      run: |
        $allureVersion = "2.35.1"
        $allureUrl = "https://github.com/allure-framework/allure2/releases/download/$allureVersion/allure-$allureVersion.zip"
        $allureZip = "allure-$allureVersion.zip"
        $allureDir = "allure-$allureVersion"
    
        # 下载并解压
        Invoke-WebRequest -Uri $allureUrl -OutFile $allureZip
        Expand-Archive -Path $allureZip -DestinationPath .
    
        # 获取绝对路径
        $allurePath = (Resolve-Path $allureDir).Path
        $allureBin = Join-Path $allurePath "bin"
    
        # 输出路径供后续步骤使用
        "allure_bin=$allureBin" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "allure_version=$allureVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    
        Write-Host "Allure installed to: $allurePath"
        Write-Host "Allure bin directory: $allureBin"

    - name: Run tests with smart handling
      id: smart_tests
      shell: pwsh
      run: |
        # 设置错误处理
        $ErrorActionPreference = "Continue"
    
        # 运行测试
        pytest -v -x test_cases/ui_tests/test_master_data/test_material_management.py::TestMaterialManagement::test_add_material --alluredir=allure-results
        $exitCode = $LASTEXITCODE
    
        # 输出退出码和结果
        "exit_code=$exitCode" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    
        # 分析退出码
        switch ($exitCode) {
            0 { 
                "result=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                Write-Host "✅ 所有测试通过"
                $finalExitCode = 0
            }
            1 { 
                "result=assertion_failure" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                Write-Host "⚠️ 断言失败，但继续执行后续步骤"
                $finalExitCode = 0
            }
            default { 
                "result=other_error" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                Write-Host "❌ 其他错误，停止执行后续步骤"
                $finalExitCode = $exitCode
            }
        }
        exit $finalExitCode

    - name: Generate Allure report
      if: always() && (steps.smart_tests.outputs.result == 'success' || steps.smart_tests.outputs.result == 'assertion_failure')
      shell: pwsh
      run: |
        # 从步骤输出获取路径信息
        $allureBin = "${{ steps.install_allure.outputs.allure_bin }}"
        $allureVersion = "${{ steps.install_allure.outputs.allure_version }}"
        
        Write-Host "Allure bin from previous step: $allureBin"
        
        # 检查目录是否存在
        if (-not (Test-Path $allureBin)) {
            Write-Host "❌ Allure bin 目录不存在: $allureBin"
            Write-Host "当前工作目录内容:"
            Get-ChildItem -Path . -Recurse -Depth 2 | Where-Object { $_.Name -like "*allure*" } | ForEach-Object { Write-Host $_.FullName }
            exit 1
        }
    
        # 查找可执行文件
        $allureExe = $null
        $possibleNames = @("allure.bat", "allure.cmd", "allure.exe")
        
        foreach ($name in $possibleNames) {
            $potentialPath = Join-Path $allureBin $name
            if (Test-Path $potentialPath) {
                $allureExe = $potentialPath
                break
            }
        }
    
        if (-not $allureExe) {
            Write-Host "❌ Allure 可执行文件未找到"
            Write-Host "Bin 目录内容:"
            Get-ChildItem -Path $allureBin
            exit 1
        }
    
        Write-Host "Using Allure executable: $allureExe"
        
        # 生成报告
        & "$allureExe" generate allure-results -o allure-report --clean
    
        # 验证报告生成
        if (Test-Path "allure-report/index.html") {
            Write-Host "✅ Allure报告生成成功"
            
            # 可选：列出生成的文件
            Write-Host "生成的报告文件:"
            Get-ChildItem "allure-report" -Recurse | ForEach-Object { Write-Host $_.FullName }
        } else {
            Write-Host "❌ Allure报告生成失败"
            Write-Host "allure-results 目录内容:"
            if (Test-Path "allure-results") {
                Get-ChildItem "allure-results" -Recurse
            } else {
                Write-Host "allure-results 目录不存在"
            }
            exit 1
        }

    - name: Upload artifacts
      if: always() && (steps.smart_tests.outputs.result == 'success' || steps.smart_tests.outputs.result == 'assertion_failure')
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          allure-report/
          allure-results/
        retention-days: 30

    - name: Show final status
      if: always()
      shell: pwsh
      run: |
        Write-Host "=== 测试执行完成 ==="
        Write-Host "最终结果: ${{ steps.smart_tests.outputs.result }}"
        Write-Host "退出码: ${{ steps.smart_tests.outputs.exit_code }}"