name: Python Tests with UI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Quick Edge version check
      shell: pwsh
      run: |
        $edgePath = "$env:ProgramFiles\Microsoft\Edge\Application\msedge.exe"
        if (Test-Path $edgePath) {
            $version = (Get-Item $edgePath).VersionInfo.FileVersion
            Write-Host "✅ Microsoft Edge version: $version"
            
            # 提取主版本号（WebDriver 匹配需要）
            $majorVersion = $version.Split('.')[0]
            Write-Host "✅ Major version for WebDriver: $majorVersion"
            
            echo "EDGE_MAJOR_VERSION=$majorVersion" >> $env:GITHUB_ENV
        } else {
            Write-Host "❌ Edge not found at: $edgePath"
        }

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install Python dependencies
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt 

    - name: Install Allure
      id: install_allure
      shell: pwsh
      run: |
        $allureVersion = "2.35.1"
        $allureUrl = "https://github.com/allure-framework/allure2/releases/download/$allureVersion/allure-$allureVersion.zip"
        $allureZip = "allure-$allureVersion.zip"
        $allureDir = "allure-$allureVersion"
        # 下载并解压
        Invoke-WebRequest -Uri $allureUrl -OutFile $allureZip
        Expand-Archive -Path $allureZip -DestinationPath .
        # 获取绝对路径
        $allurePath = (Resolve-Path $allureDir).Path
        $allureBin = Join-Path $allurePath "bin"
        # 添加到PATH
        "::add-path::$allureBin" | Out-File -FilePath $env:GITHUB_PATH -Append
        # 输出路径供后续步骤使用
        "allure_bin=$allureBin" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "allure_version=$allureVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Run tests with smart handling
      id: smart_tests
      shell: pwsh
      run: |
        $ErrorActionPreference = "Continue"
        
        # 临时文件记录详细结果
        $resultFile = "test-result.json"
        
        # 运行测试并输出详细结果
        pytest -v test_cases/ui_tests/test_master_data/test_unitmeasure.py::TestUnitmeasurePage::test_add_unit --alluredir=allure-results --clean-alluredir --json-report --json-report-file=$resultFile
        $exitCode = $LASTEXITCODE
        
        # 分析测试结果类型
        $resultType = "unknown"
        if (Test-Path $resultFile) {
            $resultData = Get-Content $resultFile | ConvertFrom-Json
            if ($resultData.summary.passed -gt 0) {
                $resultType = "has_passed"
            }
            if ($resultData.summary.failed -gt 0) {
                $resultType = "has_failed" 
            }
            if ($resultData.summary.error -gt 0) {
                $resultType = "has_errors"
            }
        }
        
        "exit_code=$exitCode" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "result_type=$resultType" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        # 更智能的判断逻辑
        if ($exitCode -eq 0) {
            "result=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "✅ 所有测试通过"
            $finalExitCode = 0
        }
        elseif ($exitCode -eq 1 -and $resultType -eq "has_failed") {
            "result=assertion_failure" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "⚠️ 断言失败，继续生成报告"
            $finalExitCode = 0
        }
        else {
            "result=environment_error" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "❌ 环境错误（退出码: $exitCode, 类型: $resultType），停止工作流"
            $finalExitCode = $exitCode
        }
        
        exit $finalExitCode

    - name: Generate Allure report
      if: always() && (steps.smart_tests.outputs.result == 'success' || steps.smart_tests.outputs.result == 'assertion_failure')
      shell: pwsh
      run: |
        # 使用之前步骤输出的 allure_bin 路径
        $allureBin = "${{ steps.install_allure.outputs.allure_bin }}"
        $allureCmd = Join-Path $allureBin "allure.bat"  # Windows 使用 .bat
        # 生成报告
        & $allureCmd generate allure-results -o allure-report --clean

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          allure-report/
        retention-days: 30
